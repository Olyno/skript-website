{"custom_commands":"<h1>Custom commands</h1>\n<h2><a href=\"#creating_custom_commands\">#</a> Creating custom commands</h2>\n<p>Custom commands can be some of the trickiest things to create. They can also be some of the most powerful. In this tutorial I am going to show everything about commands, and how to use them. Let's start by defining what we want the user to type when they execute this command:</p>\n<pre>command /test:</pre>\n<p>We now have set up a command called /test. But what if we want the user to enter in more information? </p>\n<p>Things like a player name or a number. That is where we use arguments. Arguments are a lot like variables, but only have one value that changes each time a command is executed. They are completely dependent on what the player types in. In order to add them to a command you enclose the type of argument with &#60; and &gt;</p>\n<pre>\ncommand /test &#60;player>:\n# And for multiple arguments\ncommand /test &#60;player> &#60;number> &#60;text>:\n</pre>\n<p>You may also want to make an argument optional. That way the user doesn't have to type it in if they don't want or need that argument for the command. For example, if you made a command that teleported you to spawn 1, spawn 2, or spawn 3, and the user just wanted to type in /spawn to get them to spawn 1. Rather than making them type /spawn 1 you can just make it optional, and default to 1. Here's an example of what I'm talking about</p>\n<pre>command /spawn [&#60;number=1>]:</pre>\n<p>The [ and ] around the argument make it optional (the user doesn't have to type it in) and then we also give it a default value so that we know what to do if the user doesn't type it in. Also know that if you use an optional text argument, that the default value should be in quotes (\")</p>\n<pre>command /test [&#60;text=\"Example\">]:</pre>\n<p>This first line of defining a command ends with a : Because of that (and because it acts as our event) all subsequent lines need to be indented. The next few lines are all about the options that our command will have. Things like a description, permission, and usage message.</p>\n<pre>\ncommand /test:\n    description: Description of what the command does\n    usage: The message that comes up if the user types the command in wrong\n    permission: The permission required to use this command\n    permission message: The message that appears if the user doesn't have the correct permission\n    executable by: Who can use this command? Players, console, or both?\n    aliases: Other names or shortcuts to this command\n    trigger:\n        #Effects\n</pre>\n<p>If you read the tutorial on indentation, then you will know that I mentioned that the only exception to the indent after colon rule was commands. Well here it is. Each of these options ends with a colon, but only the trigger gets an indent. The only one of these options that is required is the trigger (it holds what the command actually does) The rest aren't necessary, but can be useful in controlling aspects of the command. Now let's go one by one, and get into more detail on each of these options</p>\n<ul>\n<li><p><strong>Description:</strong> What does this command do? What is it's purpose? It is mostly for in code documentation, but it's good to add anyway</p></li>\n<li><p><strong>Usage:</strong> How should the command look? This message will come up when someone types a command in wrong. For example, if the command wanted a number, but the user typed in \"Rabbit\" this message would come up. It defaults to the arguments that you defined on the first line. It is used to make the command a little bit more readable. Instead of \"/pay &#60;player&gt; &#60;number&gt;\" you could put \"/pay &#60;player&gt; &#60;amount&gt;\"</p></li>\n<li><p><strong>Permission:</strong> This allows you to define a permission for the command. By default there is no permission for these commands, so anyone can use them.</p></li>\n<li><p><strong>Permission message:</strong> Here you define what the message should be if the user doesn't have the permission you set earlier. There is a default message that will show if you don't include this option</p></li>\n<li><p><strong>Executable by:</strong> Who can use this command? The options are \"players\" \"console\" \"console and players\" Defaults to console and players</p></li>\n<li><p><strong>Aliases:</strong> Make some shortcuts to your commands! You can add multiple aliases by separating them with commas \"/h, /help, /helpmeout\"</p></li>\n<li><p><strong>Trigger:</strong> The most important part of any command, and the only option here that is required. Nothing else goes on this line, but all the next lines need to be indented again. This block of code will define what the command should do when executed.</p></li>\n</ul>\n<p>Here is a completed example:</p>\n<pre>\ncommand /help [&#60;number=1>]:\n    description: Shows the help menus\n    usage: /help [page]\n    permission: help.permission\n    permission message: &cYou don't have the help permission!\n    executable by: players and console\n    aliases: /h, /helpmerightnow\n    trigger:\n        message \"This is a help command!\"\n</pre>\n<h2><a href=\"#arguments\">#</a> Arguments</h2>\n<p>Now we know how to set up a command, and where to add the effects, but how do we use the arguments (the data that the player entered in) in the trigger? If there is only one type of an argument you can reference it by using \"arg &amp;#60 type&gt;\"</p>\n<ul>\n<li>arg player</li>\n<li>arg number</li>\n<li>arg text</li>\n</ul>\n<p>Alternatively you can use the number of the argument. This is determined by what order the arguments come in the command.</p>\n<pre>\ncommand /test &#60;number> &#60;player> &#60;text>:\n    trigger:\n       message \"%arg 1%\"\n       message \"%arg 2%\"\n       message \"%arg 3%\"\n</pre>\n<p>This command will display the arguments in order 1, 2, and then 3. The number, the player, and then the text. Here is a list of potential type that you can use: <a href=\"/documentation/types\">here</a></p>\n<p>+ means that it is a valid type, but I have not tested to make sure that it works as a command argument. If anyone has tested some of these you can pm me and I'll update the list</p>\n<p>Post in the help forum with any questions, and on the tutorials forum if you have any improvements or suggestions for this tutorial</p>","functions":"<h1>Functions</h1>\n<h2><a href=\"#construct_function\">#</a> Constructing Your Function</h2>\n<p>There are two important things to consider when constructing your function, that you should know when you make the first line. What are going to be the inputs of the function (the data it receives), and what the return (if any) of the function will be (the outputs). So let's make our first function.</p>\n<pre>\nfunction myFunction(i: number) :: number:\n    set {_i} to {_i} + 1\nreturn {_i}\n</pre>\n<p>So let's break this down so you know what is happening. First, what does this function do?</p>\n<p>This function will take a number and add 1 to it. Yes, you might not need a function to do this, but let's make it as simple as we can.</p>\n<pre>\n# First you declare your function name, this can be anything. In this case 'myFunction'\n# You will then need to determine your inputs. I want this function to take in a single number\n# In the that, I also declare what will be the reference name of the variable, in this case 'i' which can be reference by {_i}\n# I then determine my return, in this case a single number. The format is as follows:\n#    function %function name%(%variable name%: %variable type%) :: %return type%:\nfunction myFunction(i: number) :: number:\n\n    #you simply indent the appropriate amount, spaces or tabs whatever you prefer and put in your code.\n    set {_i} to {_i} + 1\n\n#if you have a return, you simply return the value, it must match the value type you have specified\nreturn {_i}\n</pre>\n<p>So, that is probably the most basic function you can do. However, a function is not required to make a return (have an output). In most programming languages this is called a 'void' which means the executing code will not be looking for a return, but instead calls on the function to DO something.</p>\n<p>Let's say we want a function that gives players a set of gear.</p>\n<pre>\nfunction leathSet(p: player):\n    set helmet of {_p} to leather helmet\n    set chestplate of {_p} to leather chestplate\n    set leggings of {_p} to leather leggings\n    set boots of {_p} to leather boots\n</pre>\n<p>This would give the reference player a full set of leather armor. Modifying this makes it easier to give kits and such for instances like KitPVP. You could also make a neat little function that lets you dye a full set of armor with a simple function.</p>\n<pre>\nfunction leatherDye(c: color , p: player):\n    #note the comma, this allows us to input multiple values\n    dye {_p}'s helmet {_c}\n    dye {_p}'s leggings {_c}\n    dye {_p}'s chestplate {_c}\n    dye {_p}'s boots {_c}\n</pre>\n<h2><a href=\"#calling_your_function\">#</a> Calling Your Function</h2>\n<p>So now that we have covered a few simple ways to construct your function.</p>\n<p>Lets see how we can call them.</p>\n<p>Shown is a demonstration of using the functions we have created in the same order as before.</p>\n<pre>\nset {this.number} to 1\n#{this.number} will equal 1 here\nset {this.number} to myFunction({this.number})\n#{this.number} will equal 2 here\n</pre>\n<p>The above will call our function that simply adds 1 to our inputted value.</p>\n<pre>\ncommand /leatherset:\n    trigger:\n        leatherSet(player)\n</pre>\n<p>The above will give the executing player a full set of leather armor.</p>\n<pre>\ncommand /leatherset &#60;color>:\n    trigger:\n        leatherSet(player)\n        leatherDye(argument 1 , player)\n</pre>\n<p>Using the above, and our two leather set functions, we give the player a full set of leather armor, and then let them dye it whatever color they inputted.</p>\n<h2><a href=\"#built_in_functions\">#</a> Built in functions</h2>\n<p>Skript 2.2 has a few simple built in functions. View them <a href=\"/documentation/functions\">here</a></p>\n<h2><a href=\"#extra_notes\">#</a> Extra notes</h2>\n<p>That's really all there is to it. Word of advice though, if you can do what you need to do with a simple command like the examples, I would personally just use a command. Functions are more useful if you are going to be executing the same code over and over from different areas.</p>\n<p>Giving the ability for multiple scripts to start a game or use a math function that is unique to your server, these are things that functions are great for. I personally use them a lot for logging, as my server has many scripters who contribute. By using functions, I ensure that the all of the logs look the same with the same data and Formatting provided, without having the scripters waste their time writing different log formats over and over.</p>\n<p>Functions have the unique ability of being able to be called from any other script regardless of location. They do not have to be in the same file as what is calling them.</p>\n<p>When a function is changed and it's change is no longer valid for something that is calling it (like changing a return from a number to a text), then the caller will use the old version of the function until either it is reloaded, or the server is reset.</p>\n<p>Skript will not allow to input the wrong values in the wrong slots. This allows you to avoid having to check if the parameters are the correct type or not (something you had to do in the skQuery Counterparts).</p>","loops":"<h1>Loops</h1>\n<p>This tutorial is mostly for those of you who do not do any programming outside of Skript. It explains the concept of loops, as well as examples of how the syntax looks in Skript.</p>\n<h2><a href=\"#what_loops_are\">#</a> What loops are?</h2>\n<p>A loop is a bit of code that keeps repeating itself (aka looping) until a certain condition is false. See this image For a visual representation of how this works.</p>\n<p>The condition isn't very obvious in most of the loops Skript provides.</p>\n<pre>\nloop 10 times:\n    broadcast \"Hi\"\n</pre>\n<p>This code simply runs (or loops) 10 times. So where's the condition? There is an expression called loop-number that holds the number of times the loop has run (starts with 1) The condition is: if loop-number is greater than 10. After the loop runs for the tenth time, loop-number becomes 11 and the condition becomes false, and so the code moves on past the loop.</p>\n<p>Loops simply repeat the code they are given. However, there can be slight differences each time. For example, the loop-number expression is a different number each iteration (an iteration is one time of running the loop code. The previous example would have 10 iterations). So what would happen if we broadcasted that number?</p>\n<pre>\nloop 10 times:\n    broadcast \"%loop-number%\"\n</pre>\n<p>The output would be:<br />\n1<br />\n2<br />\n3<br />\n4<br />\n5<br />\n6<br />\n7<br />\n8<br />\n9<br />\n10</p>\n<p>As you can see, the loop did something slightly different in each of it's iterations. <br />\nNow let's have an example with players:</p>\n<pre>\nloop all players:\n    if {var::%loop-player%} is true:\n        send \"You are true!\" to loop-player\n    else:\n        send \"You are not true!\" to loop-player\n</pre>\n<p>For this example, let's say there are 3 players: player1, player2, and player3. <br />\nThe loop starts with player1, checks the variable, and sends a message depending on the outcome. Then it does the same with player2 and player3. Now the loop is out of players, and continues on with any code after the loop. If {var.player1} was true and {var.player2} was false, player1 would get the true message and player2 would get the false message. This is the main advantage of loops. They allow you to handle each object separately instead of all exactly the same.</p>\n<h2><a href=\"#looping_list_variables\">#</a> Looping List Variables</h2>\n<p>List variables have the capability to hold many values. This means that you can loop through them! This is explained a bit more above in the Variable explanation.</p>\n<h2><a href=\"#while_loops\">#</a> While Loops</h2>\n<p>While loops look much closer to that diagram I posted above. While other kinds of loops go through a specified amount of objects before running out, a while loop could potentially run on forever. Just like other loops, this will keep iterating until the condition is false. Make sure to add a wait 1 tick into the code or else the server will crash from the constant while loop.</p>\n<pre>\nwhile {var} is true:\n    strike lightning at player\n    chance of 10%:\n        set {var} to false\n</pre>\n<p>In this case the loop will keep running and striking the player with lightning with only a 10% chance of stopping each time. Any condition you can use with an if statement, you can use for a while loop.</p>\n<p>Hopefully this clears up some of the confusion around loops in Skript. You can post in the help forum, or send me a PM (LimeGlass) if you have any questions, or need some more explanation about loops.</p>","text":"<h1>Text in Scripts</h1>\n<p>Skript allows you to write pieces of text (programmers usually call them strings) in the scripts. This is done by putting the text inside double quotes, as follows:</p>\n<pre>\"this is text\"</pre>\n<p>Simple, isn't it? If an effect, expression, condition, trigger or function accepts something of type text or string, you can use this format to write it right there!</p>\n<h2><a href=\"#formatting_text\">#</a> Formatting Text</h2>\n<p>But isn't just text a bit boring? Worry not, as Minecraft has support for colors, styles and other formatting options in chat. Most of the options also work with item and entity names.</p>\n<h2><a href=\"#colors\">#</a> Colors</h2>\n<p>Minecraft has 16 pre-set color codes to be used in text. Skript supports them in two different ways:</p>\n<ul class=\"is-list\">\n    <li>Color name tags, for example &lt;red&gt;</li>\n    <li>(Old) Minecraft color codes, like §c; using &amp; works, too</li>\n</ul>\n<p>Here's a table of all colors, including both Skript names and color codes:</p>\n<table class=\"table is-bordered is-striped is-hoverable\">\n    <tr>\n        <td>Code</td>\n        <td>Name</td>\n        <td>Alternative Names</td>\n    </tr>\n    <tr style=\"background-color: #000000; color: #FFFFFF\">\n        <td>§0</td>\n        <td>black</td>\n        <td></td>\n    </tr>\n    <tr style=\"background-color: #0000AA; color: #FFFFFF\">\n        <td>§1</td>\n        <td>blue</td>\n        <td>dark blue</td>\n    </tr>\n    <tr style=\"background-color: #00AA00; color: #FFFFFF\">\n        <td>§2</td>\n        <td>green</td>\n        <td>dark green</td>\n    </tr>\n    <tr style=\"background-color: #00AAAA; color: #FFFFFF\">\n        <td>§3</td>\n        <td>cyan</td>\n        <td>aqua, dark cyan, dark aqua, dark turquoise, dark turquois</td>\n    </tr>\n    <tr style=\"background-color: #AA0000; color: #FFFFFF\">\n        <td>§4</td>\n        <td>red</td>\n        <td>dark red</td>\n    </tr>\n    <tr style=\"background-color: #AA00AA; color: #FFFFFF\">\n        <td>§5</td>\n        <td>purple</td>\n        <td>dark purple</td>\n    </tr>\n    <tr style=\"background-color: #FFAA00; color: #000000\">\n        <td>§6</td>\n        <td>orange</td>\n        <td>orange, gold, dark yellow</td>\n    </tr>\n    <tr style=\"background-color: #AAAAAA; color: #000000\">\n        <td>§7</td>\n        <td>grey</td>\n        <td>light grey, gray, light gray, silver</td>\n    </tr>\n    <tr style=\"background-color: #555555; color: #FFFFFF\">\n        <td>§8</td>\n        <td>grey</td>\n        <td>light grey, gray, light gray, silver</td>\n    </tr>\n    <tr style=\"background-color: #5555FF; color: #FFFFFF\">\n        <td>§9</td>\n        <td>light blue</td>\n        <td>light blue, indigo</td>\n    </tr>\n    <tr style=\"background-color: #55FF55; color: #000000\">\n        <td>§a</td>\n        <td>light green</td>\n        <td>lime, lime green</td>\n    </tr>\n    <tr style=\"background-color: #55FFFF; color: #000000\">\n        <td>§b</td>\n        <td>light cyan</td>\n        <td>light aqua, turquoise, turquois, light blue</td>\n    </tr>\n    <tr style=\"background-color: #FF5555; color: #000000\">\n        <td>§c</td>\n        <td>light red</td>\n        <td>pink</td>\n    </tr>\n    <tr style=\"background-color: #FF55FF; color: #000000\">\n        <td>§d</td>\n        <td>magenta</td>\n        <td>light purple</td>\n    </tr>\n    <tr style=\"background-color: #FFFF55; color: #000000\">\n        <td>§e</td>\n        <td>yellow</td>\n        <td>light yellow</td>\n    </tr>\n    <tr style=\"background-color: #FFFFFF; color: #000000\">\n        <td>§f</td>\n        <td>white</td>\n        <td></td>\n    </tr>\n</table>\n<p>For information not related to Skript, see<br />\n<a href=\"https://minecraft.gamepedia.com/Formatting_codes#Color_codes\">Minecraft Wiki page</a> concerning colors.</p>\n<p>Note that depending on Skript configuration, color codes may do more than just<br />\nchange color of text after them. By default, for backwards compatibility, they<br />\nclear following styles: magic, bold, strikethrough, underlined, italic. Other<br />\nstyles are not affected, and this feature can be toggled of in config.sk.</p>\n<h2><a href=\"#other_styles\">#</a> Other Styles</h2>\n<p>Minecraft also has various other styles available. The following are available everywhere, including item and entity names:</p>\n<table class=\"table is-bordered is-striped is-hoverable\">\n    <tr>\n        <td>Code</td>\n        <td>Name</td>\n        <td>Alternative Names</td>\n    </tr>\n    <tr>\n        <td>§k</td>\n        <td>magic</td>\n        <td>obfuscated</td>\n    </tr>\n    <tr>\n        <td>§l</td>\n        <td style=\"font-weight: bold\">bold</td>\n        <td>b</td>\n    </tr>\n    <tr>\n        <td>§m</td>\n        <td style=\"text-decoration: line-through\">strikethrough</td>\n        <td>strike, s</td>\n    </tr>\n    <tr>\n        <td>§n</td>\n        <td style=\"text-decoration: line-under\">underlined</td>\n        <td>underline, u</td>\n    </tr>\n    <tr>\n        <td>§o</td>\n        <td style=\"font-style: italic\">italic</td>\n        <td>italics, i</td>\n    </tr>\n    <tr>\n        <td>§r</td>\n        <td style=\"text-decoration: line-through\">reset</td>\n        <td>r</td>\n    </tr>\n</table>\n<p>If it wasn't clear from the table, §r clears all other formatting and colors.<br />\nYou'll probably use it quite often when sending chat messages from scripts.</p>\n<p>Skript also supports certain newer features, which are only available in chat.<br />\nThose do not have formatting codes, so you must use tags for them.</p>\n<table class=\"table is-bordered is-striped is-hoverable\">\n    <tr>\n        <td>Name</td>\n        <td>Alternative Names</td>\n        <td>Description</td>\n    </tr>\n    <tr>\n        <td>link</td>\n        <td>open url, url</td>\n        <td>Opens a link when player clicks on text</td>\n    </tr>\n    <tr>\n        <td>run command</td>\n        <td>command, cmd</td>\n        <td>Makes player execute a chat command when they click on text</td>\n    </tr>\n    <tr>\n        <td>suggest command</td>\n        <td></td>\n        <td>Adds a command to chat prompt of player when clicked</td>\n    </tr>\n    <tr>\n        <td>tooltip</td>\n        <td>show text</td>\n        <td>Shows a tooltip when player hovers over text with their mouse</td>\n    </tr>\n</table>\n<p>All of these styles require a parameter, in format<br />\n<span class=\"skript-code-inline\">&lt;name:parameter&gt;</span><br />\nFor link, parameter must be either http or https url if you want clients to<br />\nrecognize it. For others, it can be any text you'd like<br />\n(you can make player run invalid commands if you wish).</p>\n<p><strong>Text and Variables</strong><br />\nVariable names are text, but obviously formatting that text does no good.<br />\nHowever, everything else you can do for text, you can do for variable names.<br />\nA guide about this is coming… some day.<br />\nGuide written by <a href=\"https://github.com/bensku\">bensku</a>.</p>"}