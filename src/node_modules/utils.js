export async function setupColors() {
	return new Promise((resolve, rejects) => {
		const elements = document.querySelectorAll('pre.skript-code');
		for (const element of elements) {
			element.innerHTML = element.innerHTML.split('\n').map(line => 
				line
					.replace(/(%(-)?(\w+)%)/gmui, '<span style="color: #42cad4"><a href="#$3">$1</a></span>')
					.replace(/\b(set|delete|clear|remove|add|to)\b/gmui, '<span style="color: #5193fc">$1</span>')
					.replace(/\b(player)\b/gmui, '<span style="color: #5193fc">$1</span>')
					.replace(/(with|broadcast|send|message|kick)( .+)/gmui, '<span style="color: #5193fc">$1</span>$2')
					.replace(/\b(on|cancel event|command|function|return)\b/gmui, '<span style="color: #db00a1">$1</span>')
					.replace(/\b(if|else|is)\b/gmui, '<span style="color: #db00a1">$1</span>')
					.replace(/\b(loop|while|chance)\b/gmui, '<span style="color: #db00a1">$1</span>')
					.replace(/(\{_?[\w\.::]+\})/gmui, '<span style="color: #c90610">$1</span>')
					.replace(/(permission|permission message|usage|executable by|aliases|cooldown|description|trigger):/gmui, '<span style="color: #c90610">$1:</span>')
					.replace(/(<\w+>):/gmui, '<span style="color: #5606a1">$1</span>')
					.replace(/(%-?\w+%):/gmui, '<span style="color: #edf502">$1</span>')
			).join('\n')
		}
		resolve();
	})
}

export async function setupLinks() {
	return new Promise((resolve, rejects) => {
		for (const element of document.getElementsByTagName('a')) {
			if (hasNot(element, 'navbar-item', 'navbar-burger', 'navbar-link')) {
				element.outerHTML = element.outerHTML.replace(/href="(\#.+)"/g, `href="${window.location.href.replace(/\#.+/g, '')}$1"`);
				element.addEventListener('click', async () => {
					const dummy = document.createElement('input'),
					text = window.location.href;
					document.body.appendChild(dummy);
					dummy.value = text;
					dummy.select();
					document.execCommand('copy');
					document.body.removeChild(dummy);
				})
			}
		}
		resolve();
	})
}

export async function setupImages() {
	return new Promise((resolve, rejects) => {
		const imgDefer = document.getElementsByTagName('img');
		for (let i = 0; i < imgDefer.length; i ++) {
			if (imgDefer[i].getAttribute('data-src')) {
				imgDefer[i].setAttribute('src', imgDefer[i].getAttribute('data-src'));
			} 
		}
		resolve();
	})
}

export async function setupEverything() {
	return new Promise((resolve, rejects) => {
		Promise.all([setupColors(), setupImages(), setupLinks()])
			.then(resolve)
			.catch(rejects);
	})
}

export async function search(searchValue) {
	return new Promise((resolve, rejects) => {
		const cards = document.getElementsByClassName('card');
		let hidden = 0;
		for (let card of cards) {

			const title = card.getElementsByClassName('card-header-title')[0].innerText;
			const description = card.getElementsByClassName('card-content')[0].getElementsByTagName('p')[0].innerText;
			const pattern = card.getElementsByClassName('card-content')[0].getElementsByTagName('pre')[0].innerText;
			
			const filters = [title, description, pattern];
			
			const result = filters.filter(filter => filter.toUpperCase().indexOf(searchValue.toUpperCase()) > -1)
			
			if (result.length > 0) {
				card.style.display = "";
			} else {
				card.style.display = "none";
				hidden ++;
			}

		}

		if (hidden === cards.length) {
			rejects(true);
		}

		resolve();

	})
}

export function hasNot(element, ...classNames) {
	for (const className of classNames) {
		if (element.classList.contains(className)) {
			return false;
		}
	}
	return true;
}

export function firstLetterUpperCase(text) {
	if (typeof text !== 'string') return ''
	return text.charAt(0).toUpperCase() + text.slice(1)
}